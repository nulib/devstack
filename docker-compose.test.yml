---
version: '3.4'
services:
  iiif:
    depends_on:
    - localstack
    image: nulib/iiif-express
    restart: unless-stopped
    read_only: true
    volumes:
    - type: volume
      target: /tmp
    - type: volume
      target: /var/run
    ports:
    - 8184:3000
    environment:
    - TIFF_BUCKET=dev-pyramids
    - S3_ENDPOINT=http://localstack:4566/
    - AWS_ACCESS_KEY_ID=fake
    - AWS_SECRET_ACCESS_KEY=fake
    healthcheck:
      test:
      - CMD
      - wget
      - "--quiet"
      - "--tries=1"
      - "--spider"
      - http://localhost:3000/iiif/2/
      interval: 30s
      timeout: 5s
      retries: 3
  db:
    image: postgres:10-alpine
    restart: unless-stopped
    read_only: true
    volumes:
    - type: volume
      target: /data
    - type: volume
      target: /tmp
    - type: volume
      target: /var/log
    - type: volume
      target: /var/run
    environment:
    - PGDATA=/data
    - POSTGRES_USER=docker
    - POSTGRES_PASSWORD=d0ck3r
    ports:
    - 5434:5432
    command: postgres -c max_connections=300
    healthcheck:
      test: |
        CMD echo 'SELECT 1' | \
          PGPASSWORD=d0ck3r psql --host 127.0.0.1 --username docker \
          --dbname docker --quiet --no-align --tuples-only
      interval: 30s
      timeout: 5s
      retries: 3
  elasticproxy:
    depends_on:
    - elasticsearch
    image: nulib/elasticproxy:latest
    restart: unless-stopped
    read_only: true
    volumes:
    - type: volume
      target: /home/node
    - type: volume
      target: /tmp
    - type: volume
      target: /var/log
    - type: volume
      target: /var/run
    ports:
    - 3335:3334
    environment:
      UPSTREAM: http://elasticsearch:9200/
      API_TOKEN_HEADER: X-Api-Token
      API_TOKEN_SECRET: ab00ffc725da64fa07b20f42ed8bbcf0fda5779aa55c90cedf3a81e09e3a2b14
      OPENAM_SERVER: https://websso.it.northwestern.edu/amserver/
      OPENAM_COOKIE: openAMssoToken
    healthcheck:
      test:
      - CMD
      - wget
      - "--quiet"
      - "--tries=1"
      - "--spider"
      - http://localhost:3334/auth/whoami
      interval: 30s
      timeout: 5s
      retries: 3
  elasticsearch:
    image: bitnami/elasticsearch:6.8.14
    restart: unless-stopped
    read_only: true
    volumes:
    - type: volume
      target: /bitnami/elasticsearch/data
    - type: volume
      target: /tmp
    - type: volume
      target: /opt/bitnami/elasticsearch
    - type: volume
      target: /var/log
    - type: volume
      target: /var/run
    - ./extras/elasticsearch/elasticsearch.yml:/opt/bitnami/elasticsearch/config/elasticsearch.yml
    ports:
    - 9202:9200
    environment:
      ELASTICSEARCH_HEAP_SIZE: "256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
      - CMD
      - curl
      - "-f"
      - http://localhost:9200/
      interval: 30s
      timeout: 5s
      retries: 3
  fedora:
    image: samvera/fcrepo4:4.7.5
    restart: unless-stopped
    read_only: true
    volumes:
    - type: volume
      target: /data
    - type: volume
      target: /tmp
    - type: volume
      target: /var/lib/jetty
    - type: volume
      target: /var/log
    - type: volume
      target: /var/run
    ports:
    - 8986:8080
  hls:
    depends_on:
    - localstack
    image: avalonmediasystem/nginx:minio
    environment:
    - AVALON_DOMAIN=http://host.docker.internal:3000
    - AVALON_STREAMING_BUCKET_URL=http://localstack:4566/derivatives/
    ports:
    - '8881:80'
  kibana:
    depends_on:
    - elasticsearch
    image: docker.elastic.co/kibana/kibana-oss:6.3.2
    restart: unless-stopped
    ports:
    - 5603:5601
    healthcheck:
      test:
      - CMD
      - curl
      - "-f"
      - http://localhost:5601/
      interval: 30s
      timeout: 5s
      retries: 3
  ldap:
    image: nulib/ldap-alpine
    restart: unless-stopped
    volumes:
      - type: volume
        target: /var/lib/samba
    ports:
      - 391:389
      - 638:636
    environment:
      DOMAIN: library.northwestern.edu
      DOMAINPASS: d0ck3rAdm1n!
      INSECURELDAP: "true"
      NOCOMPLEXITY: "true"
    healthcheck:
      test:
      - CMD
      - echo
      - ""
      - "|"
      - nc
      - localhost
      - "389"
      interval: 30s
      timeout: 5s
      retries: 3
  localstack:
    image: localstack/localstack
    restart: unless-stopped
    volumes:
      - type: volume
        target: /data
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./extras/localstack/aws:/root/.aws:ro
      - ./extras/localstack/scripts:/tmp/scripts:ro
    ports:
      - 4568:4566
    environment:
      DNS_ADDRESS: 127.0.0.1
      EDGE_PORT: 4566
      EDGE_PORT_HTTP: 4566
      DATA_DIR: /data
      DOCKER_HOST: unix:///var/run/docker.sock
      LAMBDA_DOCKER_NETWORK: devstack_test_default
      LAMBDA_EXECUTOR: local
      LOCALSTACK_API_KEY: ${LOCALSTACK_API_KEY:-}
    healthcheck:
      test: 
        - CMD
        - /healthcheck.sh
      interval: 30s
      timeout: 30s
      retries: 5
  redis:
    image: redis:alpine
    restart: unless-stopped
    read_only: true
    volumes:
    - type: volume
      target: /tmp
    - type: volume
      target: /var/log
    - type: volume
      target: /var/run
    ports:
    - 6381:6379
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 30s
      timeout: 5s
      retries: 3
  solr:
    image: solr:7.2-alpine
    restart: unless-stopped
    read_only: true
    volumes:
    - type: volume
      target: /opt/solr/server/solr
    - type: volume
      target: /opt/solr/server
    - type: volume
      target: /tmp
    - type: volume
      target: /var/log
    - type: volume
      target: /var/run
    ports:
    - 8985:8983
    - 9985:9983
    command: solr -f -cloud
    healthcheck:
      test:
      - CMD
      - wget
      - "-O"
      - "/dev/null"
      - http://localhost:8983/solr/
      interval: 30s
      timeout: 5s
      retries: 3
  sslproxy:
    image: nginx
    volumes:
    - type: bind
      source: ./extras/sslproxy/proxy.conf
      target: /etc/nginx/conf.d/default.conf
    - type: bind
      source: $HOME/.devbox_cert/devbox.library.full.pem
      target: /etc/nginx/cert.crt
    - type: bind
      source: $HOME/.devbox_cert/devbox.library.key.pem
      target: /etc/nginx/cert.key
