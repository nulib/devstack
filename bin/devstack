#!/usr/bin/env ruby

require 'fileutils'
require 'json'
require 'pathname'
require 'socket'
require 'time'
require 'open-uri'
require 'ostruct'
require 'uri'
require 'yaml'

class DevStack
  attr_accessor :context

  INTERNAL_COMPOSE = Gem::Dependency.new('', '>= 2.0.0-beta.4')

  def initialize(argv)
    ENV['COMPOSE_PROJECT_NAME'] ||= 'devstack'
    @config_file = 'docker-compose.yml'
    @context = OpenStruct.new applications: [], argv: argv, test_mode: false, flags: [], services: [], argz: []
    parse_command_line
    check_test_mode
  end

  def known_services
    @known_services ||= YAML.safe_load(File.read(compose_file), aliases: true)['services'].keys
  end

  def volumes
    @volumes ||= YAML.safe_load(File.read(compose_file), aliases: true)['volumes'].keys
  end

  def interpret_arg(arg)
    if dependencies.key?(arg)
      @context.applications << arg
      arg_services = dependencies[arg].fetch('services', [arg])
    else
      arg_services = [arg]
    end
    arg_services = dependencies.dig(arg, 'services') || [arg]
    expanded = known_services & arg_services
    if expanded.empty?
      context.argz << arg
    else
      context.services += (expanded - context.services)
    end
  end

  def parse_command_line
    argv = context.argv
    context.flags << argv.shift while argv.first.to_s.start_with?('-')
    interpret_arg(argv.pop) while argv.length > 1 && !argv.last.start_with?('-')
  end

  def check_test_mode
    return if (['-t', '--test'] & context.flags.to_a).empty?
    ENV['COMPOSE_PROJECT_NAME'] += '_test'
    @config_file = 'docker-compose.test.yml'
    context.test_mode = true
  end

  def init_docker_compose
    compose = `docker info | grep compose:`
    compose_version = compose.scan(/\d.+\d/).first
    if INTERNAL_COMPOSE.match?('', Gem::Version.new(compose_version).to_s)
      @docker_compose = ["docker", "compose"]
    else
      warn("You are running an older version of Docker that does not support `docker compose`. Please consider upgrading.")
      @docker_compose = ["docker-compose"]
    end
  end

  def docker_compose_cmd
    init_docker_compose if @docker_compose.nil?
    @docker_compose.join(" ")
  end

  def docker_compose_array(args = [])
    init_docker_compose if @docker_compose.nil?
    result = @docker_compose + args
    result
  end

  def display_usage
    output = `#{docker_compose_cmd} 2>&1`.split(/\nCommands:\n/).last
    commands = Hash[output.lines.collect { |line| line.strip.split(/\s+/, 2) }.reject(&:empty?)]
    commands['branch'] = 'Show or change the current devstack working tree branch (for development)'
    commands['portmap'] = 'Get a JSON report of running services and their ports'
    commands['provision'] = 'Use terraform to provision `localstack` for the specified application'
    commands['update'] = 'Pull the latest devstack command/configs from github'
    commands['utils'] = 'Show the path to the devstack bash/zsh shell functions'
    commands['version'] = 'Show the devstack version information'
    warn %(Usage:\n  devstack [-d|--debug] [-t|--test] [COMMAND] [ARGS...]\n\nCommands:)
    Hash[commands.sort].each_pair do |command, description|
      warn format('  %-18s %s', command, description)
    end
  end

  def version
    File.read(root.join('VERSION')).strip
  end

  def display_version
    Dir.chdir(root.to_s) do
      cmds = ['git fetch origin >/dev/null 2>&1', 'git rev-parse main', 'git rev-parse origin/main'].join(' && ')
      (local_rev, remote_rev) = `#{cmds}`.strip.split
      warn "devstack version #{version}, build #{local_rev[0..7]}\n" + `#{docker_compose_cmd} version`
      return if local_rev == remote_rev
      remote_version = `git show origin/main:VERSION`.strip
      warn "\nVersion #{remote_version}, build #{remote_rev[0..7]} available."
      warn 'Run `devstack update` to upgrade'
    end 
  end

  def compose_file
    root.join(@config_file).to_s
  end

  def dependencies
    @dependencies ||= YAML.safe_load(File.read(root.join('sets.yml')), aliases: true)
  end

  def root
    @root ||= Pathname(File.expand_path('../..', this_file))
  end

  def this_file
    if @this_file.nil?
      @this_file = __FILE__
      @this_file = File.readlink(@this_file) while File.symlink?(@this_file)
    end
    @this_file
  end

  def cmdline
    docker_compose_array(['-f', compose_file] + context.argv + context.services + context.argz).tap do |result|
      if context.argv[0] == 'up' and not context.argv.index('-d')
        result.insert(result.index('up') + 1, '-d')
      end
    end
  end

  def cleanup_extra_containers
    network = ENV['COMPOSE_PROJECT_NAME'] + "_default"
    status, headers, containers = docker(request(:get, "/containers/json", {filters: {network: [network]}}))
    containers.select! do |container|
      container["Names"][0] =~ /^\/#{ENV['COMPOSE_PROJECT_NAME']}-localstack-\d+_/
    end

    return if containers.length == 0

    $stderr.puts "[+] Pruning extra containers"
    containers.each do |container|
      $stderr.print " â ¿ Container #{container["Names"][0].sub(/^\//, '')}... "
      docker(request(:post, %{/containers/#{container["Id"]}/stop}))
      docker(request(:delete, %{/containers/#{container["Id"]}}))
      $stderr.puts "Removed"
    end
  end

  def pre_exec
    case context.argv[0]
    when 'down' then cleanup_extra_containers()
    end
  end

  def post_exec
    case context.argv[0]
    when 'up' then provision!
    end
  end

  def exec!
    warn cmdline.inspect if context.flags.include?('-d')
    begin
      pre_exec()
      Kernel.system(*cmdline)
      post_exec()
    rescue Interrupt # rubocop:disable Lint/HandleExceptions
      # Let it go
    end
  end

  def link!
    Dir.chdir(root.to_s) do
      Dir['bin/*'].each do |bin|
        source = File.expand_path(bin)
        target = "/usr/local/bin/#{File.basename(bin)}"
        unless File.exist?(target)
          warn "Linking #{source} -> #{target}"
          FileUtils.ln_s source, target 
        end
      end

      cert_dir = File.expand_path(File.join(ENV['HOME'], '.devbox_cert'))
      unless Dir.exists?(cert_dir)
        FileUtils.mkdir_p(cert_dir)
      end

      Dir['/usr/local/etc/devbox_ssl/*'].each do |file|
        source = File.expand_path(file)
        target = File.join(cert_dir, File.basename(file))
        unless File.exist?(target)
          warn "Copying #{source} -> #{target}"
          FileUtils.cp source, target 
        end
      end
    end
  end

  def portmap!
    label = ENV['COMPOSE_PROJECT_NAME']
    result = running_containers.inject({}) do |r, c| 
      name = c['Names'].find { |n| n.include?(label) }.gsub(%r{^/#{label}_(.+)_\d+$},'\1')
      r[name] = c['Ports'].inject({}) { |h, p| h[p['PrivatePort']] = p['PublicPort']; h }.compact 
      r
    end
    puts result.to_json
  end

  def localstack_ready(port)
    result = URI.open("https://localhost.localstack.cloud:#{port}/health")
    return false unless result.status[0] == '200'
    return false unless result.meta['content-type'] == 'application/json'
    content = JSON.parse(result.read)
    return false unless content.dig('features', 'initScripts') == 'initialized'
    true
  rescue
    false
  end

  def provision!
    return if @context.applications.empty?
    port = @context.test_mode ? 4568 : 4566
    warn "Waiting for localstack to become ready"
    while !localstack_ready(port)
      sleep 1
    end

    warn "Provisioning localstack for #{@context.applications.join(', ')}"

    resources = @context.applications.reduce(['main']) do |list, app|
      list + dependencies[app].fetch('resources', [])
    end
    resources.uniq!

    tf_dir = root.join('.terraform')
    FileUtils.mkdir_p(tf_dir)
    FileUtils.rm_f(tf_dir.join("*"))
    FileUtils.cp_r(root.join('extras/localstack/terraform/lambdas'), tf_dir)
    FileUtils.cp_r(root.join('extras/localstack/terraform/modules'), tf_dir)
    resources.each do |manifest|
      FileUtils.cp(root.join("extras/localstack/terraform/#{manifest}.tf"), tf_dir)
    end

    Dir.chdir(tf_dir) do
      workspace = @context.test_mode ? 'test' : 'dev'
      action = %x(terraform workspace list) =~ /\b#{workspace}\b/ ? 'select' : 'new'
      system("terraform init")
      system("terraform workspace #{action} #{workspace}")
      system("terraform apply -auto-approve -var localstack_endpoint=https://localhost.localstack.cloud:#{port}")
    end
  end

  def branch!
    Dir.chdir(root.to_s) do
      `git fetch origin`
      if context.argz[0]
        if `git status --porcelain`.empty?
          system("git switch #{context.argz[0]}")
        else
          warn "Cannot switch branches. Current working tree is not clean."
        end
      else
        system("git branch")
      end
    end
  end

  def update!
    Dir.chdir(root.to_s) do
      `git pull origin`
      `#{docker_compose_cmd} -f #{compose_file} pull`
      link!
    end
    display_version
  end

  def run!
    if (context.flags & ['-h', '--help']).any? || context.argv.empty? || (context.argv == ['help'] && context.argz.empty?)
      display_usage
      exit 1
    end

    case context.argv.first
    when 'version', '-v', '--version'
      display_version
    when 'branch'
      branch!
    when 'link'
      link!
    when 'portmap'
      portmap!
    when 'provision'
      provision!
    when 'update'
      update!
    when 'utils'
      puts root.join('devstack-functions')
    else
      exec!
    end
  end

  private

  def running_containers
    label = ENV['COMPOSE_PROJECT_NAME']
    filter = {label: ["com.docker.compose.project=#{label}"]}
    status, headers, containers = docker(request(:get, "/containers/json", {filters: filter}))
    containers
  end

  def request(method, path, params = {}, body = "")
    param_strings = params.map do |k, v|
      v = v.to_json unless v.kind_of?(String)
      "#{k}=#{URI.encode_www_form_component(v)}"
    end
    "#{method.to_s.upcase} #{path}?#{param_strings.join("&")} HTTP/1.0\r\n\r\n#{body}"
  end

  def docker(content)
    UNIXSocket.open('/var/run/docker.sock') do |socket|
      socket.send(content, 0)
      headers, body = socket.read.split(/\r\n\r\n/,2)
      headers = headers.lines.collect(&:chomp)
      status = headers.shift
      headers = headers.inject({}) do |acc, head| 
        key, value = head.split(/\s*:\s*/, 2)
        acc[key.downcase] = value
        acc
      end

      case headers["content-type"]
      when "application/json" then body = JSON.parse(body)
      when /yaml$/ then body = YAML.load(body)
      end

      [status, headers, body]
    end
  end
end

DevStack.new(ARGV).run!
