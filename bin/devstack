#!/usr/bin/env ruby

require 'fileutils'
require 'json'
require 'pathname'
require 'socket'
require 'time'
require 'ostruct'
require 'yaml'

class DevStack
  attr_accessor :context

  def initialize(argv)
    ENV['COMPOSE_PROJECT_NAME'] ||= 'devstack'
    @config_file = 'docker-compose.yml'
    @context = OpenStruct.new argv: argv, test_mode: false, flags: [], services: [], argz: []
    parse_command_line
    check_test_mode
  end

  def known_services
    @known_services ||= YAML.safe_load(File.read(compose_file))['services'].keys
  end

  def volumes
    @volumes ||= YAML.safe_load(File.read(compose_file))['volumes'].keys
  end

  def interpret_arg(arg)
    expanded = known_services & (dependencies[arg] || [arg])
    if expanded.empty?
      context.argz << arg
    else
      context.services += (expanded - context.services)
    end
  end

  def parse_command_line
    argv = context.argv
    context.flags << argv.shift while argv.first.to_s.start_with?('-')
    interpret_arg(argv.pop) while argv.length > 1 && !argv.last.start_with?('-')
  end

  def check_test_mode
    return if (['-t', '--test'] & context.flags.to_a).empty?
    ENV['COMPOSE_PROJECT_NAME'] += '_test'
    @config_file = 'docker-compose.test.yml'
    context.test_mode = true
  end

  def display_usage
    output = `docker-compose 2>&1`.split(/\nCommands:\n/).last
    commands = Hash[output.lines.collect { |line| line.strip.split(/\s+/, 2) }]
    commands['ports'] = 'Get a JSON report of running services and their ports'
    commands['update'] = 'Pull the latest devstack command/configs from github'
    commands['version'] = 'Show the devstack version information'
    warn %(Usage:\n  devstack [-d|--debug] [-t|--test] [COMMAND] [ARGS...]\n\nCommands:)
    Hash[commands.sort].each_pair do |command, description|
      warn format('  %-18s %s', command, description)
    end
  end

  def version
    File.read(root.join('VERSION')).strip
  end

  def display_version
    Dir.chdir(root.to_s) do
      cmds = ['git fetch origin >/dev/null 2>&1', 'git rev-parse master', 'git rev-parse origin/master'].join(' && ')
      (local_rev, remote_rev) = `#{cmds}`.strip.split
      warn "devstack version #{version}, build #{local_rev[0..7]}\n" + `docker-compose version`
      return if local_rev == remote_rev
      remote_version = `git show origin/master:VERSION`.strip
      warn "\nVersion #{remote_version}, build #{remote_rev[0..7]} available."
      warn 'Run `devstack update` to upgrade'
    end
  end

  def compose_file
    root.join(@config_file).to_s
  end

  def dependencies
    @dependencies ||= YAML.safe_load(File.read(root.join('sets.yml')))
  end

  def root
    @root ||= Pathname(File.expand_path('../..', this_file))
  end

  def this_file
    if @this_file.nil?
      @this_file = __FILE__
      @this_file = File.readlink(@this_file) while File.symlink?(@this_file)
    end
    @this_file
  end

  def cmdline
    (['docker-compose', '-f', compose_file] + context.argv + context.services + context.argz).tap do |result|
      result << '-v' if context.test_mode && (['down', '-v'] & context.argv == ['down'])
    end
  end

  def trap_cmd
    return [] unless ['up', '-d'] & context.argv == ['up']
    ['docker-compose', '-f', compose_file, 'down'].tap do |result|
      result << '-v' if context.test_mode
    end
  end

  def exec!
    warn cmdline.inspect if context.flags.include?('-d')
    begin
      Kernel.system(*cmdline)
    rescue Interrupt # rubocop:disable Lint/HandleExceptions
      # Let it go
    ensure
      final_cmd = trap_cmd
      Kernel.system(*final_cmd) unless final_cmd.empty?
    end
  end

  def link!
    Dir.chdir(root.to_s) do
      Dir['bin/*'].each do |bin|
        source = File.expand_path(bin)
        target = "/usr/local/bin/#{File.basename(bin)}"
        unless File.exist?(target)
          warn "Linking #{source} -> #{target}"
          FileUtils.ln_s source, target 
        end
      end

      cert_dir = File.expand_path(File.join(ENV['HOME'], '.devbox_cert'))
      unless Dir.exists?(cert_dir)
        FileUtils.mkdir_p(cert_dir)
      end

      Dir['/usr/local/etc/devbox_ssl/*'].each do |file|
        source = File.expand_path(file)
        target = File.join(cert_dir, File.basename(file))
        unless File.exist?(target)
          warn "Copying #{source} -> #{target}"
          FileUtils.cp source, target 
        end
      end
    end
  end

  def portmap!
    label = ENV['COMPOSE_PROJECT_NAME']
    request = %{/containers/json?filters={"label":["com.docker.compose.project=#{label}"]}}
    status, headers, containers = docker_sock(request)
    result = containers.inject({}) do |r, c| 
      name = c['Names'].find { |n| n.include?(label) }.gsub(%r{^/#{label}_(.+)_\d+$},'\1')
      r[name] = c['Ports'].inject({}) { |h, p| h[p['PrivatePort']] = p['PublicPort']; h }.compact 
      r
    end
    puts result.to_json
  end

  def update!
    Dir.chdir(root.to_s) do
      `git pull origin`
      `docker-compose -f #{compose_file} pull`
      link!
    end
    display_version
  end

  def export!
    cmd = %{docker-compose -f #{compose_file} run -v #{Dir.pwd}:/external transfer export #{volumes.join(" ")}}
    system(cmd)
  end

  def import!
    input_file = context.argz.first
    cmd = %{docker-compose -f #{compose_file} run -v #{File.expand_path(input_file)}:/external/#{File.basename(input_file)} transfer import #{input_file}}
    puts cmd
    system(cmd)
  end

  def run!
    if (context.flags & ['-h', '--help']).any? || context.argv.empty? || (context.argv == ['help'] && context.argz.empty?)
      display_usage
      exit 1
    end

    case context.argv.first
    when 'version', '-v', '--version'
      display_version
    when 'export'
      export!
    when 'import'
      import!
    when 'link'
      link!
    when 'portmap'
      portmap!
    when 'update'
      update!
    else
      exec!
    end
  end

  private

  def docker_sock(request)
    UNIXSocket.open('/var/run/docker.sock') do |socket|
      socket.send("GET #{request} HTTP/1.0\r\n\r\n", 0)
      headers, body = socket.read.split(/\r\n\r\n/,2)
      headers = headers.lines.collect(&:chomp)
      status = headers.shift
      headers = headers.inject({}) do |acc, head| 
        key, value = head.split(/\s*:\s*/, 2)
        acc[key.downcase] = value
        acc
      end
      [status, headers, JSON.parse(body)]
    end
  end
end

DevStack.new(ARGV).run!
