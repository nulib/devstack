#!/bin/bash

instance() {
  docker ps -qf "name=es-proxy-$1"
}

start() {
  cid=$(instance $AWS_PROFILE)
  if [[ -n "$cid" ]]; then
    echo "es-proxy already running"
  else
    ES_CONFIG=$(aws --profile $AWS_PROFILE secretsmanager get-secret-value --secret-id "config/meadow" --query "SecretString" --output text | jq '.search')
    AWS_ACCESS_KEY_ID=$(jq -r '.access_key_id' <<< $ES_CONFIG)
    AWS_SECRET_ACCESS_KEY=$(jq -r '.secret_access_key' <<< $ES_CONFIG)
    ENDPOINT=$(jq -r '.cluster_endpoint' <<< $ES_CONFIG)

    output=$(docker run --rm \
      --name es-proxy-$AWS_PROFILE \
      -d \
      -e AWS_REGION=$AWS_REGION \
      -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
      -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
      -p $PORT:8080 cllunsford/aws-signing-proxy -target $ENDPOINT > /dev/null)

    if [[ $? == 0 ]]; then
      echo "Proxying http://localhost:$PORT/ to $AWS_PROFILE cluster in $AWS_REGION"
      echo "Kibana available on http://localhost:$PORT/_plugin/kibana/"
    else
      echo $output
    fi
  fi
}

stop() {
  cid=$(instance $AWS_PROFILE)
  if [[ -n "$cid" ]]; then
    docker stop $cid > /dev/null
    echo "Proxy to $AWS_PROFILE cluster stopped"
  else
    echo "Proxy not running for $AWS_PROFILE cluster"
  fi
}

usage() {
  cat <<__EOC__
Usage:
  $(basename $0) start [profile] [port]
  $(basename $0) stop [profile]

Arguments:
  profile    AWS profile to use (default: \$AWS_PROFILE)
  port       Port to run proxy on (default: 9200)
__EOC__
}

CMD=$1
AWS_PROFILE=${2:-$AWS_PROFILE}
PORT=${3:-9200}
AWS_REGION=${AWS_REGION:-us-east-1}

if [[ -z $AWS_PROFILE ]]; then
  usage
  echo ""
  echo "AWS_PROFILE not set. Exiting."
  exit 1
fi

case $CMD in
  start)
    start
    ;;
  stop)
    stop
    ;;
  *)
    usage
    ;;
esac

